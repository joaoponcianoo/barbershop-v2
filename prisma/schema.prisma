generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Accounts[]
  sessions      Sessions[]
  bookings      Bookings[]

  @@map("users")
}

model Barbershops {
  id          String               @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  services    BarbershopServices[]

  @@map("barbershops")
}

model BarbershopServices {
  id           String       @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Float
  barbershopId String
  barbershop   Barbershops  @relation(fields: [barbershopId], references: [id])
  bookings     Bookings[]

  @@map("barbershop_services")
}

model Bookings {
  id        String              @id @default(uuid())
  userId    String
  user      Users               @relation(fields: [userId], references: [id])
  serviceId String
  service   BarbershopServices  @relation(fields: [serviceId], references: [id])
  date      DateTime
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("bookings")
}

model Accounts {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Sessions {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationTokens {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
